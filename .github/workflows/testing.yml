name: Testing

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  dev:
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        go-version: ['1.16', '1.17']
        package: ['dnsutils', 'collectors', 'loggers', 'subprocessors']

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}

    - name: Set up Go for root
      run: |
        sudo ln -sf `which go` `sudo which go` || true
        sudo go version
        
    - name: Test ${{ matrix.package }}
      run: sudo go test -timeout 10s ./${{ matrix.package }}/ -cover -v

  int:
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        go-version: ['1.16', '1.17']
        package: ['config', 'clientquery_dnstaptcp', 'clientquery_dnstapunix' ]

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}
    - uses: actions/setup-python@v2
 
    - name: build binary
      run: CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o go-dnscollector *.go

    - name: Test ${{ matrix.package }}
      run: |
        sudo python3 -m pip install dnstap_pb fstrm dnspython
        sudo python3 -m pip install --upgrade protobuf
        sudo python3 -m unittest tests.${{ matrix.package }} -v

  metrics:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        go-version: ['1.16', '1.17']
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}
 
    - name: build binary
      run: CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o go-dnscollector *.go

    - name: run collector
      run: ./go-dnscollector -config ./testsdata/config_webapi.yml &

    - name: get metrics
      run: curl -u admin:changeme http://127.0.0.1:8080/metrics


  e2e-coredns:
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        go-version: ['1.16', '1.17']
        coredns: [ '1.8.4', '1.8.5', '1.8.6' ]
        mode: [ 'tcp', 'unix' ]

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}
    - uses: actions/setup-python@v2

    - name: build binary
      run: CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o go-dnscollector *.go

    - name: Deploy coredns docker image
      run: |
        sudo docker run -d --network="host" --name=coredns -v $PWD/testsdata/:$PWD/testsdata/ -v /tmp/:/tmp/ coredns/coredns:${{ matrix.coredns }} -conf $PWD/testsdata/coredns_${{ matrix.mode }}.conf
        sudo docker logs coredns > /tmp/core.out
        sudo cat /tmp/core.out

    - name: Test ${{ matrix.mode }}
      run: |
        sudo python3 -m pip install dnstap_pb fstrm dnspython
        sudo python3 -m pip install --upgrade protobuf
        sudo python3 -m unittest tests.dnsquery_dnstap${{ matrix.mode }} -v

  e2e-dnsdist:
    runs-on: ubuntu-20.04
    env:
      COLLECTOR_USER: pdns

    strategy:
      matrix:
        go-version: ['1.16', '1.17']
        dnsdist: [ '16', '17' ]
        mode: [ 'tcp', 'unix' ]

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}
    - uses: actions/setup-python@v2

    - name: build binary
      run: CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o go-dnscollector *.go

    - name: add pdns user
      run: |
        sudo addgroup --system --gid 953 pdns
        sudo adduser --system --disabled-password --no-create-home -uid 953 --gid 953 pdns

    - name: Deploy dnsdist docker image
      run: |
        sudo docker run -d --network="host" --name=dnsdist --volume=$PWD/testsdata/dnsdist_${{ matrix.mode }}.conf:/etc/dnsdist/conf.d/dnsdist.conf:ro -v /tmp/:/tmp/ powerdns/dnsdist-${{ matrix.dnsdist }}

    - name: Test ${{ matrix.mode }}
      run: |
        sudo python3 -m pip install dnstap_pb fstrm dnspython
        sudo python3 -m pip install --upgrade protobuf
        sudo -E python3 -m unittest tests.dnsquery_dnstap${{ matrix.mode }} -v


